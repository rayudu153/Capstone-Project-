 

User Story-1: Customer registration (Service)
Effort Estimation : 1 
AC
____________________________________________________________________________
Given the  application is running on http://<ipaddress>:<port>/
When the end point is POST /api/registration 
Then the payload to be accepted is 
	{
		email:String, 
		password: String, 
		firstName: String, 
		lastName: String, 
		dob:date 
	} 
When made a request with Postman/ rest client / swagger 
Then the data model to be shown which is created with ID 
And with status code 201 
User Story-2:
1) Auth-Service
AC: 
Given the  application is running on http://<ipaddress>:<port>/
When the end point is POST /api/registration 
Then the payload to be accepted is 
	{
		email:String, 
		password: String, 
		firstName: String, 
		lastName: String, 
		dob:date   (Refer to DB)
	} 
When made a request with Postman/ rest client / swagger 
Then the data model to be shown which is created with ID 
And with status code 201 


2)Order and payment service

AC: 
Given the  application is running on http://<ipaddress>:<port>/
When the end point is POST /api/registration 
Then the payload to be accepted is 
	{
		email:String, 
		password: String, 
		firstName: String, 
		lastName: String, 
		dob:date   (Refer to DB)
	} 
When made a request with Postman/ rest client / swagger 
Then the data model to be shown which is created with ID 
And with status code 201 


________________________________________________________________________________________
------------------------------------Admin-POD 4 (5 participants)-----------------------
________________________________________________________________________________________
1) Develop end points to disaply on required data on dashboard
   -- use serch-service
   -- graphical dispaly of total orders vs cuisine
   -- graphical dispaly of total merchant vs cuisine
   --More requirements to be finalized

____________________________________________________________________________
 
User Story-3: Create Spring Boot application for Discovery service, API Gateway(with predicates), Admin, Customer, Marketer and write test case (service layer, controller, mock DAO Layer)
Effort Estimation :2

Create spring boot application which shall have the basic end point of /api/ which shall give a acknowledgement as "up", and seed the same to the bitbucket repository. 

Note: 
1. you are expected to have all the microservices registered under discovery service + API Gateway 
2. Use Java 17 
3. Spring boot 3.2.1



Ref: https://github.com/aaa/bbb/ccc


User Story 4: Customer registration (UI)
Effort Estimation : 1 
AC: 
Given the web application is running on http://<ipaddress>:<port>/
And on top right corner the link is clicked "Register" 
Then new page to be opened which will ask for 
    email : should be valid format of email 
When email format is not valid (preferably use onblur)
Then Error Message to be shown next to email field "Please enter valid email"
And Password : should have atleast 1 special character and number of characters to be 6 
And accept firstname and LastName which is minimum 6 characters
And only alphabets 
And The date filed should not be editable (ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date)
And Sex to be selected as radio button from the list : MALE | FEMALE| OTHER 
When all the fields entered are valid 
Then submit button to be enabled
When clicked on "Submit" button 
Then a message to be shown "Thank You for registering with us, please verify from your registered email" 

Note: Only registration shall not make customer to enter to the application, for this need to validate with OTP 





____________________________________________________________________________

User Story-5: Customer Registration (UI) - OTP 
Effort Estimation : 1 
AC: 
Given the web application is running on http://<ipaddress>:<port>/
When the customer has registered successfully 
Then the application should generate the OTP (Email based)
And send an email to the registered one 
When user get an OTP 
Then he/she should be able to put the OTP in the application 
When the OTP is validated 
Then the application shall allow customer to goto home page / dashboard page 
And show Welcome "<Customer Name>" on top right corner 
When hover on top of it 
Then the font to be 1.2px 

Note: Use email client (open source only)


____________________________________________________________________________

User Story-6: Customer Registration Service - valid case
Effort Estimation : 1 

AC1: 
When the application is running  http://<ipaddress>:<port>/
And the end point invoked is POST /api/registration/validate
{
	email:"email address"
}
Then the email to be triggered for the email 
And should have a random number (OTP)


AC2: 
When the application is running  http://<ipaddress>:<port>/
And the end point invoked is POST /api/registration/validate/otp
{
	email:"email address", 
	otp: "number"
}
Then the application shall validate the email/ OTP are correct 
And the application shall set the status of the customer as active 

Note: by default the customer status to be inactive

____________________________________________________________________________

User Story-7: Admin Login Service - valid case
Effort Estimation : 3 

AC1: 
When the application is running  http://admin.<ipaddress>:<port>/
And the end point invoked is POST /api/admin
{
	email:"email address" 
	Password:"password" 
}

AC2: 
When the application is running  http://<ipaddress>:<port>/
And the end point invoked is POST /api/admin
{
	email:"email address", 
	password:"password"   //validated from DB
}
Then the application shall validate the email/password are correct 
And the application shall set the status of the admin as active 

Note: by default the admin status to be inactive


User Story-8: Customer Orders- CRUD Service - valid case
Effort Estimation :  4

AC1: 
When the application is running  http://<ipaddress>:<port>/
And the end point invoked is POST /api/order/
-- provide customer name, GST, location, category , serving time, mobile number.
--Add customer
--Update customer
--Get customer
--delete customer 
____________________________________________________________________________

User Story-8: homepage 
__________________________________________________________________
homepage :
__________________________________________________________________

1.	Customer Registration:
Customer can register themselves by providing name, age, gender, food preference(veg/nonveg) , pin code, mobile number, 
email and address.


2.	Merchant Registration:
Merchant can register themselves by providing merchant name, GST, location, category , serving time, mobile number.

3.	Login
Users can use there username, password for login

4.	Product search
Customer can search products based on the name, restaurant.

5.	Trending Service
Trending service shows the top5 products and restaurant  which are popular on the given day.




User Story-9: 
___________________________________________________________________
Customer
___________________________________________________________________

1.	Product Listing:
Product listing the default products which are shown to customer after the login successfully.
 Customer

2.	Order Processing and Payment.
Once the customer has selected the products and finalised quality , he can place order and do a payment using a third party system.


















































































































































